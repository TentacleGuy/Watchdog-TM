class AnalogStick{constructor(){this.stick=document.querySelector(".analog-stick"),this.bounds=document.querySelector(".analog-stick-bounds"),this.isDragging=!1,this.lastSentTime=0,this.updateInterval=100,this.MAX_SPEED=1,this.MAX_TURN_RATE=1,this.WHEEL_BASE=.3,this.canvasScale=100,this.arcAngle=Math.PI/2,this.canvas=document.getElementById("turning-canvas"),this.canvas&&(this.ctx=this.canvas.getContext("2d"),this.robotX=this.canvas.width/2,this.robotY=this.canvas.height-50),this.socket=window.sharedSocket,this.setupEventListeners()}setupEventListeners(){this.stick.addEventListener("mousedown",t=>this.startDragging(t)),this.stick.addEventListener("mousemove",t=>this.drag(t)),document.addEventListener("mouseup",()=>this.stopDragging()),this.stick.addEventListener("touchstart",t=>this.startDragging(t)),this.stick.addEventListener("touchmove",t=>this.drag(t)),document.addEventListener("touchend",()=>this.stopDragging())}startDragging(t){this.isDragging=!0;var s=this.bounds.getBoundingClientRect();this.initialX=("mousedown"===t.type?t:t.touches[0]).clientX-s.left,this.initialY=("mousedown"===t.type?t:t.touches[0]).clientY-s.top}drag(t){var s,i;this.isDragging&&(t.preventDefault(),s=this.bounds.getBoundingClientRect(),i=(t.type.startsWith("mouse")?t:t.touches[0]).clientX-s.left,t=(t.type.startsWith("mouse")?t:t.touches[0]).clientY-s.top,this.updateStickPosition(i,t))}stopDragging(){this.isDragging&&(this.isDragging=!1,this.reset())}reset(){this.stick.style.left="50%",this.stick.style.top="50%",this.sendMotorCommand(0,0,0,0),this.ctx&&this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}updateStickPosition(t,s){var i=this.bounds.getBoundingClientRect(),e=i.width/2,h=t-i.width/2,a=s-i.height/2,h=(e<Math.sqrt(h*h+a*a)&&(a=Math.atan2(a,h),t=e*Math.cos(a)+i.width/2,s=e*Math.sin(a)+i.height/2),this.stick.style.left=t/i.width*100+"%",this.stick.style.top=s/i.height*100+"%",(t-i.width/2)/e),a=(s-i.height/2)/e;this.calculateMotorValues(h,a)}calculateMotorValues(e,h){var a=Date.now();if(!(a-this.lastSentTime<this.updateInterval)){this.lastSentTime=a;a=Math.sqrt(e*e+h*h);if(a<.1)this.sendMotorCommand(0,0),this.ctx&&this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);else{a=Math.min(a,1);let t=Math.atan2(e,-h)*(180/Math.PI),s=(t<0&&(t+=360),0),i=0;e=255;0<=t&&t<90?(s=e,i=e*Math.pow(1-t/90,2)):90<=t&&t<180?(s=e,i=e*Math.pow((t-90)/90,2),s=-s,i=-i):180<=t&&t<270?(i=e,s=-(s=e*Math.pow(1-(t-180)/90,2)),i=-i):270<=t&&t<360&&(i=e,s=e*Math.pow((t-270)/90,2)),s*=a,i*=a,this.sendMotorCommand(s,i)}}}drawRobotDirection(t,s){var i;this.ctx&&(this.ctx.fillStyle="yellow",this.ctx.beginPath(),this.ctx.arc(this.robotX,this.robotY,5,0,2*Math.PI),this.ctx.fill(),s=80*s,i=this.robotX+Math.sin(t)*s,t=this.robotY-Math.cos(t)*s,this.ctx.strokeStyle="gray",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(this.robotX,this.robotY),this.ctx.lineTo(i,t),this.ctx.stroke())}sendMotorCommand(t,s){let i="0",e=0,h=(0!==t&&(i=0<t?"1":"-1",(e=Math.min(Math.round(Math.abs(t)),255))<50)&&(e=50),"0"),a=0;0!==s&&(h=0<s?"1":"-1",(a=Math.min(Math.round(Math.abs(s)),255))<50)&&(a=50);t=`${i},${e},${h},`+a;this.socket.emit("motorcommand",t)}}document.addEventListener("DOMContentLoaded",()=>{new AnalogStick});